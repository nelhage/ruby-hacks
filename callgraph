#!/usr/bin/env ruby
require 'optparse'
require 'parser'
require 'parser/current'
require 'set'
require 'logger'

$log = Logger.new(STDOUT)
$log.level = Logger::INFO

module CG
  class Method
    attr_reader :klass, :name
    attr_reader :callers
    attr_reader :callees

    def initialize(klass, name)
      @klass = klass
      @name = name
      @callers = Set.new
      @callees = Set.new
    end

    def call!(other)
      callees.add(other)
      other.callers.add(self)
    end

    def to_s
      "#{klass}##{name}"
    end
  end

  class Klass
    attr_reader :methods
    attr_reader :name

    def initialize(name)
      @name = name
      @methods = {}
    end

    def get_method(name)
      @methods[name] ||= Method.new(self, name)
    end

    def to_s
      name
    end
  end
end

class Processor < Parser::AST::Processor
  attr_reader :klasses
  attr_reader :typemap

  def initialize(typemap)
    @klasses = Hash.new { |h,k| h[k] = CG::Klass.new(k) }
    @typemap = typemap
  end

  def on_def(node)
    method = node.children[0].to_s
    $log.debug("  def #{method}")
    if @klass
      @method = @klass.get_method(method)
    end

    super

    @method = nil
  end

  def on_class(node)
    orig_klass = @klass
    begin
      name = "#{@klass ? @klass.name : ""}::#{klass_name(node.children.first)}"
      @klass = klasses[name]
      $log.debug("-> class #{@klass}")
      super
      $log.debug("<- class #{@klass}")
    ensure
      @klass = orig_klass
    end
  end

  alias on_module on_class

  def klass_name(node)
    bits = []
    while node
      raise "wtf #{node}" unless node.type == :const
      bits << node.children[1]
      node = node.children[0]
    end

    return bits.reverse.join("::")
  end

  def on_send(node)
    handle_send(node)
    super
  end

  def handle_send(node)
    return unless @method

    target = node.children[0]
    meth = node.children[1].to_s

    case
    when target.nil?
      dst = @klass.get_method(meth)
    when target.type == :ivar
      ivar = target.children.first.to_s
      dstklass = typemap[ivar]
      if dstklass
        dst = klasses[dstklass].get_method(meth)
      else
        dst = CG::Method.new(ivar, meth)
      end
    else
      return
    end

    $log.debug(" #{@method} -> #{dst}")

    @method.call!(dst)
  end
end

class DotRenderer
  BLACKLIST = Set.new(%w[log assert
    raise param gating_agent
    testing? __method__ request
    configatron soft_assert])

  def initialize(processor, out, opts={})
    @processor = processor
    @out = out
    @opts = opts

    @want = Hash.new do |h, meth|
      h[meth] = (meth.callers + meth.callees).any? { |m| want?(meth, m) }
    end
  end

  def want?(src, dst)
    return false if BLACKLIST.include?(dst.name) || BLACKLIST.include?(src.name)

    case @opts[:only]
    when nil
      true
    when 'self'
      dst.klass == src.klass
    when 'foreign'
      dst.klass.is_a?(CG::Klass) && src.klass != dst.klass
    when /\A@\w+/
      dst.klass == @opts[:only]
    else
      raise "Unable to interpret: --only=#{@opts[:only]}"
    end
  end

  def want_method?(meth)
    @want[meth]
  end

  def render_methods(klass)
    klass.methods.each_value do |meth|
      next unless want_method?(meth)

      @out.puts("    #{quote(meth.to_s)} [style=filled label=#{quote(meth.name)}];")
    end
  end

  def render_calls(klass)
    klass.methods.each_value do |meth|
      next unless want_method?(meth)

      meth.callees.each do |m|
        next unless want?(meth, m)
        @out.puts("  #{quote(meth)} -> #{quote(m)};")
      end
    end
  end

  def render
    @out.puts("digraph G {")
    @out.puts(' page="8.5,11;"')

    @processor.klasses.each_value do |klass|
      next unless klass.methods.values.any? { |m| want_method?(m) }
      @out.puts("  subgraph #{quote("cluster_" + klass.to_s)} {")
      @out.puts("    label = #{quote(klass)};")
      @out.puts("    color = lightgrey;")
      render_methods(klass)
      @out.puts("  }")
      render_calls(klass)
    end

    @out.puts("}")
  end

  def quote(name)
    "\"#{name}\""
  end
end

def parse_args(options)
  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
Usage: #{File.basename($0)} [options] file.rb...

Options:
EOM

    opts.on('-d', '--defined', 'Print a list of defined methods') do
      options[:defined] = true
    end

    opts.on('-c', '--called', 'Print a list of called methods') do
      options[:called] = true
    end

    opts.on('-r', '--remote', 'Print a list of called-but-not-defined methods') do
      options[:remote] = true
    end

    opts.on('-t', '--type IVAR=KLASS') do |spec|
      ivar, klass = spec.split('=')
      options[:typemap] ||= {}
      options[:typemap][ivar] = klass
    end

    opts.on('--dot=PATH', 'Write a dot callgraph') do |path|
      options[:dot] = path
    end

    opts.on('--only=WHAT') do |what|
      options[:only] = what
    end

    opts.on('-v', 'Verbose') do
      $log.level = Logger::DEBUG
    end
  end

  optparse.parse!

  if ARGV.empty?
    STDERR.puts optparse
    exit 1
  end

  return ARGV
end

def methods_defined(p)
  out = []
  p.calls.each do |klass, calls|
    calls.each do |src, dsts|
      out << "#{klass}##{src}"
    end
  end
  out
end

def methods_called(p)
  out = []
  p.calls.each do |klass, calls|
    calls.each do |src, dsts|
      dsts.each do |target, method|
        next if target
        out << "#{klass}##{method}"
      end
    end
  end
  out.uniq
end


def main
  options = {}
  paths = parse_args(options)
  p = Processor.new(options[:typemap] || {})

  paths.each do |path|
    parser = Parser::CurrentRuby.new
    buf = Parser::Source::Buffer.new(path).read
    ast = parser.parse(buf)

    p.process(ast)
  end

  if options[:defined]
    methods_defined(p).each do |m|
      puts m
    end
  elsif options[:called]
    methods_called(p).each do |m|
      puts m
    end
  elsif options[:remote]
    (methods_called(p) - methods_defined(p)).each do |m|
      puts m
    end
  end

  if options[:dot]
    f = File.new(options[:dot], 'w')
    DotRenderer.new(p, f, options).render
    f.close
  end
end

if $0 == __FILE__
  main
end
